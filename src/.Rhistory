install.packages("Rbuildtools")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
survdiff(fit.kp, rho = 0)
knitr::opts_chunk$set(echo = TRUE)
library(stats4)
library(survival)
library(flexsurv)
setwd("C:/Users/Jeremy/Dropbox/Harvard/G4 Spring/BIO 244/hw2")
# Read in data set
dat = read.csv2("dataset.csv", sep = ",")
# Randomly sample 400 from control arm and 400 from treatment arm
sample.800 = dat[c( sample(which(dat$trt == 0), 400),
sample(which(dat$trt == 1), 400) ),]
fit.kp = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
plot(fit.kp, main = "Kaplain-Meier Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = "red")
fit.kp1 = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan",
conf.type = "plain")
fit.kp2 = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan-meier",
conf.type = "log")
fit.na = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "fleming",
conf.type = "log-log")
plot(fit.na, main = "Nelson-Aalen Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = "blue")
print(fit.kp, print.rmean=TRUE, rmean=1825)
survdiff(fit.kp, rho = 0)
survdiff(formula = Surv(t2dth, c4dth) ~ 1, data = sample.800, rho = 0)
survdiff(formula = Surv(t2dth, c4dth) ~ trt, data = sample.800, rho = 0)
fit.kp$time
summary(fit.kp)$rmean
summary(fit.kp)
fit.table = summary(fit.kp)
rmean = fit.table[["*rmean"]]                               # Estimate restricted mean
rmean.se = fit.table[["*se(rmean)"]]
fit.table
fit.table[["rmean"]]
fit.table[["*rmean"]]
fit.table = summary(fit.kp, rmean =1825)
rmean = fit.table[["*rmean"]]                               # Estimate restricted mean
rmean.se = fit.table[["*se(rmean)"]]
fit.table
fit.table = summary(fit.kp, rmean = TRUE)
fit.table = summary(fit.kp, rmean = 1825)$table
rmean = fit.table[["*rmean"]]                               # Estimate restricted mean
rmean.se = fit.table[["*se(rmean)"]]
print(fit.kp, print.rmean=TRUE, rmean=1825)
install.packages("rms")
fit.group = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
survplot(fit.group)
knitr::opts_chunk$set(echo = TRUE)
library(stats4)
library(survival)
library(flexsurv)
library(rms)
setwd("C:/Users/Jeremy/Dropbox/Harvard/G4 Spring/BIO 244/hw2")
# Read in data set
dat = read.csv2("dataset.csv", sep = ",")
# Randomly sample 400 from control arm and 400 from treatment arm
sample.800 = dat[c( sample(which(dat$trt == 0), 400),
sample(which(dat$trt == 1), 400) ),]
fit.kp = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
plot(fit.kp, main = "Kaplain-Meier Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = "red")
fit.kp1 = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan",
conf.type = "plain")
fit.kp2 = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "kaplan-meier",
conf.type = "log")
fit.na = survfit(formula = Surv(t2dth, c4dth) ~ 1,
data = sample.800, type = "fleming",
conf.type = "log-log")
plot(fit.na, main = "Nelson-Aalen Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = "blue")
print(fit.kp, print.rmean=TRUE, rmean=1825)
fit.table = summary(fit.kp, rmean = 1825)$table
rmean = fit.table[["*rmean"]]                               # Estimate restricted mean
rmean.se = fit.table[["*se(rmean)"]]
survdiff(formula = Surv(t2dth, c4dth) ~ trt, data = sample.800, rho = 0)
survdiff(formula = Surv(t2dth, c4dth) ~ trt, data = sample.800, rho = 1)
fit.group = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
survplot(fit.group)
survplot(fit = fit.group)
plot(fit = fit.group, col = 1)
fit.group = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
plot(fit = fit.group, col = 1)
plot(fit.group, col = 1)
plot(fit.group, col = 2)
plot(fit.group, col = c(2,3))
plot(fit.group, col = c("blue", "red"))
legend(100, .9, c("Maintenance", "No Maintenance"), lty = 2:3)
plot(fit.group, col = c("blue", "red"))
legend(100, .9, c("Maintenance", "No Maintenance"), lty = 2:3)
fit.table = summary(fit.kp, rmean = 1825)$table
fit.table
knitr::opts_chunk$set(echo = TRUE)
library(stats4)
library(survival)
library(flexsurv)
setwd("C:/Users/Jeremy/Dropbox/Harvard/G4 Spring/BIO 244/hw2")
# Read in data set
dat = read.csv2("dataset.csv", sep = ",")
# Randomly sample 400 from control arm and 400 from treatment arm
sample.800 = dat[c( sample(which(dat$trt == 0), 400),
sample(which(dat$trt == 1), 400) ),]
fit.kp = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan-meier",
conf.type = "log-log")
plot(fit.kp, main = "Kaplain-Meier Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = c("red", "blue"))
fit.kp1 = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan",
conf.type = "plain")
fit.kp2 = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "kaplan-meier",
conf.type = "log")
fit.na = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800, type = "fleming",
conf.type = "log-log")
plot(fit.na, main = "Nelson-Aalen Estimator of Survival Curve",
xlab = "time", ylab = "Survival", col = c("red", "blue"))
print(fit.kp, print.rmean=TRUE, rmean=1825)
fit.table = summary(fit.kp, rmean = 1825)$table
rmean = fit.table[["*rmean"]]                               # Estimate restricted mean
fit.table
fit.table[1]["*rmean"]
fit.table[2]["*rmean"]
fit.table[[1,"*rmean"]]
fit.table[[2,"*rmean"]]
survplot()
survplot(survfit(formula = Surv(t2dth, c4dth) ~ trt, data = sample.800))
library(survival)
survplot(survfit(formula = Surv(t2dth, c4dth) ~ trt, data = sample.800))
fit.kp = survfit(formula = Surv(t2dth, c4dth) ~ trt,
data = sample.800,
subset = sample.800$trt == 0,
type = "kaplan-meier",
conf.type = "log-log")
plot(fit.kp, main = "Kaplain-Meier Estimator of Survival Curve",
conf.int = TRUE,
xlab = "time", ylab = "Survival", col = c("red", "blue"))
A = c(1, 2, 3, 4, 5)
sample(A, n = 1, prob = A)
sample(A, size = 1, prob = A)
for(i in seq(10000)){
ch = c(ch, sample(A, size = 1, prob = A))
}
source('~/.active-rstudio-document')
hist(ch)
table(ch)/length(ch)
B = A / sum(A)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ch = sample(A, size = 100000, prob = A)
ch2 = sample(A, size = 100000, prob = B)
x = runif(100000, min = 0, max = sum(A))
ch3 = choice(x)
print(table(ch)/length(ch))
print(table(ch2)/length(ch2))
print(table(ch3)/length(ch3))
ch = sample(A, size = 100000, prob = A)
ch = sample(A, size = 100000, prob = A, replace = T)
ch2 = sample(A, size = 100000, prob = B, replace = T)
x = runif(100000, min = 0, max = sum(A))
ch3 = choice(x)
print(table(ch)/length(ch))
print(table(ch2)/length(ch2))
print(table(ch3)/length(ch3))
x
ch3 = choice(x)
ch3 = lapply(x, choice)
print(table(ch)/length(ch))
print(table(ch2)/length(ch2))
print(table(ch3)/length(ch3))
ch3 = sapply(x, choice)
print(table(ch)/length(ch))
print(table(ch2)/length(ch2))
print(table(ch3)/length(ch3))
n = 10000000
ch = sample(A, size = n, prob = A, replace = T)
ch2 = sample(A, size = n, prob = B, replace = T)
x = runif(n, min = 0, max = sum(A))
ch3 = sapply(x, choice)
print(table(ch)/length(ch))
print(table(ch2)/length(ch2))
print(table(ch3)/length(ch3))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("reconstructKM")
library(foreach)
library(doParallel)
install.packages("foreach")
install.packages("doParallel")
library(tictoc)
library(flex)
library(foreach)
library(doParallel)
new = T
ntrials = 100
gammas = seq(0.005, 0.013, 0.002)
sizes = array(dim = c(ntrials, length(gammas)))
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
print(paste("I'm working with", cores-1, "cores"))
stopCluster(cl)
install.packages("gridExtra")
install.packages("ggplot2")
load("C:/DFCI/Jeremy/Odyssey/labelLT.RData")
plot(plot_list[[1]])
print(plot_list[[1]])
print(plot_list[1)
print(plot_list[1])
print(plot_list[[1]])
save.image("C:/DFCI/Jeremy/Odyssey/labelLT.RData")
load("C:/DFCI/Jeremy/Odyssey/labelLT.RData")
print(plot_list[[1]])
install.packages(c("BH", "bindr", "bindrcpp", "broom", "curl", "digest", "git2r", "igraph", "irlba", "knitr", "openssl", "plogr", "psych", "Rcpp", "reshape2", "rlang", "rmarkdown", "stringi", "stringr", "tibble", "tidyselect", "viridis", "viridisLite", "withr", "yaml"))
print(plot_list[[1]])
load("C:/DFCI/Jeremy/Odyssey/labelLT.RData")
print(plot_list[[1]])
plot(plot_list[[1]])
print(plot_list[[1]])
plot_list[[1]]
plot(plot_list[1])
print(plot_list[1])
plot_list[1]
plotMeansB
print(plotMeansB)
ggplot(plotMeansB)
library(ggplot2)
install.packages("Rcpp")
install.packages("yaml")
install.packages("Rcpp")
install.packages("ggplot2")
load("C:/DFCI/Jeremy/Odyssey/labelLT.RData")
print(plot_list[[1]])
plot_list[[1]]
load("C:/DFCI/Jeremy/Odyssey/plotslabelLT.RData")
plot_list[[1]]
plot_list[1]
source('~/.active-rstudio-document')
install.packages("devtools")
devtools::install_git("git://github.com/ferlicjl/diffpop.git")
knitr::opts_chunk$set(echo = TRUE)
library(diffpop)
nLT = 500
tree2 = DiffTree()
FixedPop(tree2, "LT", nLT, 1.0)
FixedPop(tree2, "ST", 2.9*nLT, 0.0)
FixedPop(tree2, "MPP", 9*nLT, 0.0)
FixedPop(tree2, "CLP", 13*nLT, 0.0)
FixedPop(tree2, "CMP", 39*nLT, 0.0)
FixedPop(tree2, "GMP", as.integer(0.24*39*nLT), 0.0)
FixedPop(tree2, "MEP", as.integer(0.39*39*nLT), 0.0)
DiffTriangle(tree2, "proB", height = 6, first_level = 2*13*nLT)
addEdge(tree2, "LT", "LT", "alpha", 0.009)
addEdge(tree2, "ST", "ST", "alpha", 0.042)
addEdge(tree2, "MPP", "MPP", "alpha", 4)
addEdge(tree2, "CLP", "CLP", "alpha", 3.00)
addEdge(tree2, "CMP", "CMP", "alpha", 4)
addEdge(tree2, "LT", "ST", "gamma1", 0.009)
addEdge(tree2, "ST", "MPP", "gamma1", 0.045)
addEdge(tree2, "MPP", "CLP", "gamma1", 0.022)
addEdge(tree2, "MPP", "CMP", "gamma1", 3.992)
addEdge(tree2, "CLP", "proB", "gamma1", 2.000)
addEdge(tree2, "CMP", "GMP", "gamma1", 2)
addEdge(tree2, "CMP", "MEP", "gamma1", 3)
addEdge(tree2, "LT", "LT", "mu", 1e-7)
addEdge(tree2, "ST", "ST", "mu", 1e-7)
addEdge(tree2, "MPP", "MPP", "mu", 1e-7)
addEdge(tree2, "CLP", "CLP", "mu", 1e-7)
addEdge(tree2, "CMP", "CMP", "mu", 1e-7)
setFitnessDistribution(tree = tree2,
distribution = "doubleexp",
alpha_fitness = 1,
beta_fitness = 1,
pass_prob = 0,
upper_fitness = NA,
lower_fitness = 0)
setRoot(tree2, "LT")
simulateTree(tree = tree2,
fixed = TRUE,
time = 700,
indir = "example/",
outdir = "example/")
load("C:/Users/Jeremy/Desktop/dat.RData")
nrow(results)
ncol(results)
load("C:/Users/Jeremy/Desktop/dat.RData")
View(full_res)
View(t(full_res))
dat = t(full_res)[-1,]
View(dat)
head(dat)
names(dat) = c("f", "r", "mu", "j", "k")
source('~/.active-rstudio-document')
unique(dat$r)
dat = t(full_res)[-1,]
names(dat) = c("f", "r", "mu", "j", "k")
dat = as.data.frame(t(full_res)[-1,])
names(dat) = c("f", "r", "mu", "j", "k")
for(r in unique(dat$r)){
print(r)
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
smatrix
View(smatrix)
points(smatrix[,2], smatrix[,4]/smatrix[,3])
source('~/.active-rstudio-document')
smatrix
source('~/.active-rstudio-document')
smatrix
points(smatrix[,2], smatrix[,5])
plot(smatrix[,2], smatrix[,5])
plot(smatrix[,2], smatrix[,5], color = smatrix[,1])
plot(smatrix[,2], smatrix[,5], col = smatrix[,1])
plot(smatrix[,2], smatrix[,5], col = smatrix[,1] / 1.5)
plot(smatrix[,2], smatrix[,5], col = smatrix[,1]% 1.5)
plot(smatrix[,2], smatrix[,5], col = smatrix[,1]*2)
plot(smatrix[,2], smatrix[,5], col = 2*smatrix[,1])
plot(smatrix[,2], smatrix[,5], col = smatrix[,1])
View(smatrix)
setwd("C:/Users/Jeremy/Desktop/prediction-validation-master/src/")
actual = read.delim2("../input/actual.txt", sep = "|")
View(actual)
actual = read.delim2("../input/actual.txt", sep = "|", header = F)
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
joined = merge(x =  actual, y = pred, by = c("time", "stock"))
head(joined)
names(joined) = c("time", "stock", "actual", "predicted")
joined$error = abs(joined$actual - joined$predicted)
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
head(joined)
joined[,c(3,4)] = as.numeric(joined[,c(3,4)])
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
View(joined)
mean(joined[joined$time %in% c(54, 55, 56, 57), 5])
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
mean(joined[joined$time %in% c(54, 55, 56, 57), 5])
seq(54, 54+4)
seq(54, 54+4-1)
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
View(mat)
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
write.csv("outputR.txt", sep = "|")
write.csv(mat, "outputR.txt", sep = "|")
write.table(mat, "outputR.txt", sep = "|")
write.table(mat, "outputR.txt", sep = "|", row.names = F, col.names = F, quote = F)
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
seq(1, max(actual$time) - window + 2)
seq(1, 5)
max(actual$time) - window + 2)
max(actual$time) - window + 2
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
for(i in seq(1, max(actual$time) - window + 1)){
x = mean(joined[joined$time %in% seq(i, i + window - 1), 5])
mat = rbind(mat, c(i, i+window-1, format(round(x, 2), nsmall = 2)))
}
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
?merge
source('C:/Users/Jeremy/Desktop/prediction-validation-master/src/average_error_window.R')
table(pred$time, pred$stock)
duplicated(pred[,c(1,2)])
any(duplicated(pred[,c(1,2)]))
any(duplicated(actual[,c(1,2)]))
sum(duplicated(pred[,c(1,2)]))
sum(duplicated(actual[,c(1,2)]))
l = c(1, 2, 3, 4)
duplicated(l)
m = c(1, 2, 3, 1)
duplicated(m)
nrow(pred)
nrow(duplicated(pred[,c(1,2)]))
length(duplicated(pred[,c(1,2)]))
table(pred$time)
plot(table(pred$time))
View(table(pred$time))
